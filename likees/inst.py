# Form implementation generated from reading ui file '/home/sloboda/inst.ui'
#
# Created by: PyQt6 UI code generator 6.1.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.



import random

from selenium import webdriver
import time
import pickle
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from PyQt6 import QtCore, QtGui, QtWidgets

class InstaBOT:
    options = Options()
    options.headless = True
    url = "https://www.instagram.com/"
    s = Service("chromedriver/chromedriver.exe")
    driver = webdriver.Chrome(service=s, options=options)

    def __init__(self):
        url = self.url
        driver = self.driver
        try:
            driver.get(url=url)
            time.sleep(1)
            for coockie in pickle.load(open("cocks.pkl", "rb")):
                driver.add_cookie(coockie)
            driver.implicitly_wait(1)
            driver.refresh()
        except Exception as ex:
            print(ex)

    def set_likes(self, person):
        driver = self.driver
        url = self.url
        url = url + person
        driver.get(url=url)
        time.sleep(1)
        post_urls = []
        pers = driver.find_element(By.XPATH, "/html")
        time.sleep(1)
        for i in range(5):
            driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", pers)
            i += 1
            time.sleep(1)
        hrefs = driver.find_elements(By.TAG_NAME, "a")
        hrefs = [item.get_attribute('href') for item in hrefs if "/p/" in item.get_attribute('href')]
        time.sleep(3)
        for href in hrefs:
            post_urls.append(href)
        print(post_urls)
        with open(f"{person}_urls.txt", 'w') as file:
            file.write("\n".join(post_urls))
        time.sleep(1)
        with open(f"{person}_urls.txt", 'r') as file:
            for line in file:
                driver.get(line)
                time.sleep(1)
                driver.find_element(By.CLASS_NAME, "fr66n").find_element(By.CLASS_NAME, "wpO6b  ").click()
                time.sleep(1)
        driver.close()

    def get_subs(self, person):
        driver = self.driver
        url = self.url
        url = url + person
        try:
            driver.get(url=url)
            time.sleep(1)
            try:
                driver.find_element(By.XPATH, "/html/body/div[1]/section/main/div/header/section/ul/li[2]/a").click()
                driver.implicitly_wait(2)
                ss = driver.find_element(By.CLASS_NAME, "_1XyCr  ").find_element(By.CLASS_NAME, "isgrP")
                time.sleep(3)

                for i in range(10):
                    driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", ss)
                    time.sleep(1)
                hrefslist = []
                hrefs = ss.find_elements(By.TAG_NAME, "li")
                for href in hrefs:
                    href = href.find_element(By.TAG_NAME, "a").get_attribute("href")
                    hrefslist.append(href)
                print(hrefslist)
                random.shuffle(hrefslist)
                with open(f"{person}_fol.txt", 'w') as file:
                    file.write("\n".join(hrefslist))


                with open(f"{person}_fol.txt", 'r') as file:
                        for line in file:
                            try:
                                driver.get(line)
                                time.sleep(2)
                                driver.find_element(By.XPATH,\
                "/html/body/div[1]/section/main/div/header/section/div[1]/div[1]/div/div").click()
                                time.sleep(30)
                            except Exception as ex:
                                print(ex)
                                driver.close()

                # for href in hrefs:
                #     href = href.find_element(By.CLASS_NAME, "enpQJ").find_element(By.CLASS_NAME, "Jv7Aj mArmR MqpiF  ")
                #     href = href.get_attribute("href")
                #     hrefslist.append(href)
                # print(hrefslist)
                # a = [hrefslist.append(href.get_attribute("href")) for href in hrefs]
                # print(a)
            except Exception as ex:
                print(ex)
                driver.close()
        except Exception as ex:
            print(ex)
            driver.close()
        finally:
            driver.close()
            driver.quit()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(799, 492)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 801, 491))
        self.label.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.label.setStyleSheet("background-image: url(newpic.jpg);")
        self.label.setText("")
        self.label.setObjectName("label")
        self.textEdit1 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit1.setGeometry(QtCore.QRect(10, 100, 180, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.textEdit1.setFont(font)
        self.textEdit1.setObjectName("textEdit1")
        self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_1.setGeometry(QtCore.QRect(200, 100, 131, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_1.setFont(font)
        self.pushButton_1.setObjectName("pushButton_1")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(340, 290, 180, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.textEdit_2.setFont(font)
        self.textEdit_2.setObjectName("textEdit_2")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(530, 290, 131, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton_1.clicked.connect(lambda: self.clicker())
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_1.setText(_translate("MainWindow", "LIKE"))
        self.pushButton_2.setText(_translate("MainWindow", "FOLLOW"))

    def clicker(self):
        text = self.textEdit1.text()
        InstaBOT.set_likes(str(text))





if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
